name: Deploy for ci/cd

# 트리거
on:
  # 원인 : 푸시
  push:
    # 대상 브랜치
    branches :
      # 대상 브랜치는 main
      - main

# 해야될 일 => jobs
jobs:
  # 잡 전체에 대한 이름 (커스텀)
  cicd-deploy:
    # Ubuntu linux 준비 -> 해당 작업이 진행되는 베이스 OS 지정
    runs-on : ubuntu-latest
    # 개별 작업 단계 지정
    steps:
      # https://github.com/actions/checkout
      # 해당 작업이 수행되면 본 레포지토리(저장소)가 체크아웃되어 os단에 저장
      # 향후 워클로우에서 엑세스 처리 가능하게 구성된다
      # name : 작업명 기술 , uses : 실제 할 일 기술
      - name: Github Repository내 파일들 checkout(불러오기)
        uses: actions/checkout@v4

      # JDK 17 버전 설치
      # https://github.com/actions/setup-java
      - name: JDK 17 버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '21'

      # application.yml 동적 생성
      # 소스 코드 내에 위치(덮어쓰기 ? 신규작성 ?)
      # RDS 세팅된 이후 진행
      # 현재는 SKIP

      # build 준비
      # chmod +x ./gladlew : 퍼미션 오류 발생 시 처리
      # ./gradlew clean build
      - name: 단위 테스트 및 빌드
        # 명령어가 여러개면 | 추가
        # 1. 빌드용 쉘스크립트(gradlew)를 퍼미션 조정
        # 2. 빌드
        # 3. 현재 위치 확인
        #     /home/runner/work/demo-deploy/demo-deploy
        # 4. 현재 위치 목록
        #     build ... src
        # 5. 빌드된 산출물의 목록 확인
        #     demo-deploy-0.0.1-SNAPSHOT-plain.jar
        run: |
          chmod +x ./gradlew
          ./gradlew clean build
          pwd
          ls
          ls ./build/libs

      # 이름이 너무 길기 때문에 적당하게 수정 -> 리눅스 명령어
      # 파일 위치를 변경하면서 이름도 변경 -> mv
      - name: 관리상 빌드된 결과물의 이름을 변경 처리
        run : |
          mv ./build/libs/*SNAPSHOT.jar ./run.jar
          ls

      # EC2 로 업로드
      # 호스트 정보(IP) , 접속자(ubuntu), 키파일(pem) ->secret
      # 업로드 대상(run.jar)
      # 타켓(EC2)의 특정 경로(복사될 위치), /home/ubuntu/server/demo
      - name: EC2에 jar 파일 업로드
        uses: appleboy/scp-action@v0.1.7
        # 위의 액션을 위한 파라미터
        # SSH의 포트를 보안상 이유로 22 -> 다른 번호로 변겨했다면
        # PORT 설정 필요
        # 파일이 여러개면 "파일, 파일 , ..."
        # 원격 서버에 볼더도 자동 생성 되는지 검토
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          # port: ${{ secrets.PORT }}
          source: run.jar
          target: /home/ubuntu/server/demo



      - name: SSH 로 EC2에 정리 후, 접속 후 서버가동
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
#          port: ${{ secrets.PORT }}
          script_stop: true
          # 처리할 반복적 작업
          # 1. 기존 jar 파일 삭제 처리 (업로드 위치, 구동 위치 구분)
          #    구동 위치 : /home/ubuntu/server/web <- 설정(가정)
          #    rm -rf 대상 => 대상의 폴더 및 하위 파일까지 모두다 삭제
          # 2. 새롭게 폴더 생성 /home/ubuntu/server/web
          #    mkdir /home/ubuntu/server/web
          # 3. jar 파일 이동 (~/demo/*.jar => ~/web/*.jar)
          #    mv
          # 4. jar 파일이 존재하는 위치로 이동
          #    cd /home/ubuntu/server/web
          # 5. 서버 중단 -> 8080포트를 사용하는 프로세스 중단
          #    sudo fuser -k -n tcp 8080 || true
          #    무조건 다음 단계로 넘어가게 처리 (|| true)
          # 6. 서버구동
          #    엑세스, 에러로그등 전체 로그를 output.log으로 출력
          #    nohup java -jar run.jar > ./output.log 2>&1 &
          # 7. 뒷정리
          #    rm -rf /home/ubuntu/server/demo
          script : |
            rm -rf /home/ubuntu/server/web
            mkdir /home/ubuntu/server/web
            mv /home/ubuntu/server/demo/run.jar /home/ubuntu/server/web
            cd /home/ubuntu/server/web
            sudo fuser -k -n tcp 8080 || true
            nohup java -jar run.jar > ./output.log 2>&1 &
            rm -rf /home/ubuntu/server/demo 
